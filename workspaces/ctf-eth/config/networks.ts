// a JSON array of deployed GSN networks. read paymaster addresses.
// (yarn deploy also reads the forwarder address)
import gsnDeployedNetworks from './gsn-networks.json'

//generated by "hardhat deploy" in this project
import ctfNetworks from './ctf-networks.json'

import {networksMetaInfo} from './networksMetaInfo'

interface NetworkType {
  name: string
  explorer?: string
  paymaster: string
  ctf: string
  relayLookupWindowBlocks?: number,
  relayRegistrationLookupBlocks?: number
  pastEventsQueryMaxPageSize?: number
}

function getLocalNetwork() {
  console.log('==reading localnet dir=', __dirname)
  try {
    const paymaster = require('../../../../build/gsn/Paymaster.json').address
    const ctf = require('../../../ctf-eth/deployments/development/CaptureTheFlag.json').address
    return {paymaster, ctf}
  } catch (e) {
    console.warn('No local network:', (e as Error).message)
  }
}

function getNetworksInfo(networks: string[]): { [chainId: string]: NetworkType } {
  return networks.reduce((set, chainId) => {
    let networkInfo: NetworkType
    let ctf: string
    let paymaster: string
    if (chainId.match(/1337/)) {
      const localnet = getLocalNetwork()
      if (!localnet) {
        //no local network..
        return set
      }
      paymaster = localnet.paymaster
      ctf = localnet.ctf
    } else {
      paymaster = (gsnDeployedNetworks as any)[chainId][0].contracts.TestPaymasterEverythingAccepted.address
      if (!paymaster) {
        throw new Error(`GSN (Paymaster) not deployed on ${chainId}`)
      }
      ctf = (ctfNetworks as any)[chainId][0].contracts?.CaptureTheFlag.address
      if (!ctf) {
        throw new Error(`CaptureTheFlag not deployed on ${chainId}`)
      }
    }

    const metaItems = networksMetaInfo[chainId]
    if (!metaItems) {
      throw new Error(`CTF deployed on ${chainId} but no networksMetaInfo`)
    }
    const {name, explorer} = metaItems
    networkInfo = {
      name,
      explorer,
      ctf,
      paymaster
    };
    return {
      [chainId]: networkInfo,
      ...set,
    }
  }, {})
}


//build a list from the CTF deployments.
// make sure we have GSN deployed on that network, too.
let ctfNetworkIds = Object.keys(ctfNetworks);
console.log('ctf networks=', ctfNetworkIds)
export const networks: { [chain: number]: NetworkType } =
  getNetworksInfo(['31337', '1337', ...ctfNetworkIds])

console.log('===exported networks=', networks)

